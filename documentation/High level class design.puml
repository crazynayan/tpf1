@startuml

!define primary_key(x) <b><u>x</u></b>
!define foreign_key(x) <color:blue>x</color>

class Program <<Singleton>> {
    foreign_key(segments)
    foreign_key(macros)
}

class DataMacro {
    primary_key(name)
    file_name
    loaded
    foreign_key(symbol_table)
    .. list ..
    errors
}

class SymbolTable {
    primary_key(label)
    dsp
    length
    name
    type
}
note right
    name can be of a macro, segment or a dsect
    type can be any combination of BRANCH, CONSTANT, LITERAL
end note

class Segment {
    primary_key(name)
    file_name
    assembled
    foreign_key(macro)
    foreign_key(nodes)
    foreign_key(data)
    .. list ..
    errors
}

class SegmentMacro {
    primary_key(seg_name)
    foreign_key(global_program)
    foreign_key(data_map)
    dsect
    using
    using_stack
    data_macro
    location_counter
    max_counter
}


class Data {
    .. bytearray ..
    constant
    literal
}

class Instruction {
    primary_key(label)
    command
    fall_down
    .. list ..
    conditions
    .. different types..
    <<operand>>
}
Program::macros --> "Many" DataMacro : contains
Program::segments --> "Many" Segment : contains
DataMacro::symbol_table --> "Many" SymbolTable : contains
Segment::macro  -->  SegmentMacro : has
SegmentMacro::global_program --> Program : refers to
SegmentMacro::data_map  --> "Many" SymbolTable : contains
Segment::data --> Data : has
Segment::nodes --> "Many" Instruction : contains

@enduml